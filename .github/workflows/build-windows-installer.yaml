name: Build Windows Installer

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write   # για να ανεβάσουμε assets στο Release

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
      PYTHONOPTIMIZE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify required files exist
        shell: pwsh
        run: |
          if (-not (Test-Path "src/ulh_desktop.py")) { throw "Missing src/ulh_desktop.py" }
          if (-not (Test-Path "ultra_lottery_helper.iss")) { throw "Missing ultra_lottery_helper.iss" }
          if (-not (Test-Path "assets")) { Write-Host "assets/ not found (continuing)."; }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Clean old build folders
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item build -Recurse -Force }
          if (Test-Path dist)  { Remove-Item dist  -Recurse -Force }

      - name: Build EXE with PyInstaller (native desktop)
        shell: pwsh
        run: |
          $iconFlag = ""
          if (Test-Path "assets\icon.ico") { $iconFlag = "--icon=assets\icon.ico" }
          pyinstaller --onefile --noconsole $iconFlag `
            --name ultra_lottery_helper `
            --add-data "assets;assets" `
            src\ulh_desktop.py
          if (-not (Test-Path "dist\ultra_lottery_helper.exe")) { throw "PyInstaller output missing" }

      - name: Install Inno Setup (via Chocolatey)
        shell: pwsh
        run: choco install innosetup --no-progress -y

      - name: Stamp version into ISS (from tag)
        shell: pwsh
        run: |
          $ver = "${env:GITHUB_REF_NAME}"
          if (-not $ver) { $ver = "0.0.0" }
          if ($ver.StartsWith("refs/tags/")) { $ver = $ver.Substring(10) }
          if ($ver.StartsWith("v")) { $ver = $ver.Substring(1) }
          '#define MyAppVersion "' + $ver + '"' | Out-File -FilePath version.iss -Encoding ASCII
          Get-Content ultra_lottery_helper.iss | Add-Content version.iss
          Move-Item -Force version.iss ultra_lottery_helper.iss

      - name: Build Installer with Inno Setup
        shell: pwsh
        run: |
          if (-not (Test-Path "dist_installer")) { New-Item -ItemType Directory -Path dist_installer | Out-Null }
          $iscc = "${env:ProgramFiles(x86)}\Inno Setup 6\ISCC.exe"
          if (!(Test-Path $iscc)) { $iscc = "${env:ProgramFiles}\Inno Setup 6\ISCC.exe" }
          if (!(Test-Path $iscc)) { throw "ISCC.exe not found. Is Inno Setup installed?" }
          & "$iscc" ultra_lottery_helper.iss
          $inst = Get-ChildItem -Path "dist_installer" -Filter "OracleLotteryPredictorInstaller_*.exe" | Select-Object -First 1
          if ($null -eq $inst) { throw "Installer not produced under dist_installer" }

      - name: Compute SHA256 checksums
        shell: pwsh
        run: |
          $exe = "dist\ultra_lottery_helper.exe"
          $inst = Get-ChildItem -Path "dist_installer" -Filter "OracleLotteryPredictorInstaller_*.exe" | Select-Object -First 1
          $exeHash  = (Get-FileHash -Path $exe -Algorithm SHA256).Hash
          $instHash = (Get-FileHash -Path $inst.FullName -Algorithm SHA256).Hash
          "SHA256 (portable exe): $exeHash"  | Out-File -FilePath sha256.txt -Encoding ascii
          "SHA256 (installer):     $instHash" | Out-File -FilePath sha256.txt -Append -Encoding ascii
          Get-Content sha256.txt

      - name: Upload artifacts (installer, exe, checksums)
        uses: actions/upload-artifact@v4
        with:
          name: OracleLotteryPredictor_build
          path: |
            dist\ultra_lottery_helper.exe
            dist_installer\OracleLotteryPredictorInstaller_*.exe
            sha256.txt

      - name: Attach assets to the GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/ultra_lottery_helper.exe
            dist_installer/OracleLotteryPredictorInstaller_*.exe
            sha256.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PyInstaller logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ./*.log
            build/**
            dist/**
