name: Build, Sign & Release (Oracle Lottery Predictor)

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Clean & PyInstaller build
        shell: pwsh
        run: |
          cd scripts
          Remove-Item -Recurse -Force ..\build, ..\dist -ErrorAction SilentlyContinue
          pyinstaller ..\src\ulh_desktop.py `
            --name "OracleLotteryPredictor" `
            --noconsole `
            --icon ..\assets\icon.ico `
            --add-data "..\src;src" `
            --add-data "..\assets;assets" `
            --add-data "..\data;data"

      - name: Upload unsigned dist
        uses: actions/upload-artifact@v4
        with:
          name: unsigned-dist
          path: dist/OracleLotteryPredictor/**

  sign-and-installer:
    needs: build-windows
    runs-on: [self-hosted, windows, ev-token]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download unsigned dist
        uses: actions/download-artifact@v4
        with:
          name: unsigned-dist
          path: dist/OracleLotteryPredictor

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Bump version & filename; build + sign
        shell: pwsh
        env:
          CERT_THUMBPRINT: ${{ secrets.CERT_THUMBPRINT }}
          TIMESTAMP_URL: ${{ secrets.TIMESTAMP_URL }}
        run: |
          cd scripts
          .\detect_version.ps1 -Tag "${{ github.ref_name }}"
          $ver = Get-Content version_detected.txt -Raw
          .\bump_version.ps1 -Tag "${{ github.ref_name }}" -Version "$ver"
          .\bump_installer_name.ps1 -Tag "${{ github.ref_name }}" -BuildNumber "${{ github.run_number }}"
          $thumb = $Env:CERT_THUMBPRINT
          if (-not $thumb) { $thumb = "" }
          $ts = $Env:TIMESTAMP_URL
          if (-not $ts) { $ts = "http://timestamp.digicert.com" }
          .\build_and_sign.ps1 -CertThumbprint "$thumb" -TimestampUrl "$ts"

      - name: Upload signing log
        uses: actions/upload-artifact@v4
        with:
          name: signing-log
          path: signing-log.txt

      - name: Optional VirusTotal upload (installer)
        if: ${{ secrets.VIRUSTOTAL_API_KEY != '' }}
        shell: pwsh
        env:
          VT_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        run: |
          $installer = Get-ChildItem .\Output -Filter *.exe | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $installer) { throw "Installer not found for VirusTotal" }
          $filePath = $installer.FullName
          Write-Host "Uploading to VirusTotal: $filePath"
          $resp = curl.exe -s -X POST "https://www.virustotal.com/api/v3/files" -H "x-apikey: $Env:VT_API_KEY" -F "file=@`"$filePath`""
          $resp | Out-File -FilePath vt-upload-response.json -Encoding utf8

      - name: Upload VirusTotal response
        if: ${{ secrets.VIRUSTOTAL_API_KEY != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: virustotal-response
          path: vt-upload-response.json

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: Output/*.exe

  release:
    needs: [build-windows, sign-and-installer]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Read CHANGELOG
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          if [ -f CHANGELOG.md ]; then cat CHANGELOG.md >> $GITHUB_OUTPUT; else echo "No CHANGELOG.md"; fi
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Oracle Lottery Predictor ${{ github.ref_name }}
          body: |
            Automated build of Oracle Lottery Predictor. Includes signed installer and unsigned dist.

            **Changelog:**
            ${{ steps.changelog.outputs.CHANGELOG }}
          files: |
            artifacts/installer/*.exe
            artifacts/unsigned-dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
